ggplot(data[data$t<tempo_final,], aes(t, satisfaction)) +
geom_line(aes(colour=nof, group=interaction(nof,id))) +
theme_bw(base_size=15) + theme(legend.position = "right") + #scale_x_continuous(breaks = seq(0, tempo_final, by = 1200)) +
scale_y_continuous(breaks = seq(0,1.8, by = 0.25), limits=c(0,1.15)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(hjust = 0.5)) +
ylab("satisfação") + theme(legend.position = "top")
data$comportamento="cooperativo"
data[data$id<=40,]$comportamento <- "cooperativo"
#install.packages("stringi")
library(stringi)
data$id <- stri_replace_all_regex(data$id, "p", "")
data$id <- sapply( data$id, as.numeric )
data[data$id<=40,]$comportamento <- "cooperativo"
data[data$id>40,]$comportamento <- "carona"
ggplot(data[data$t<tempo_final,], aes(t, satisfaction)) +
geom_line(aes(colour=comportamento, group=interaction(comportamento,id))) + facet_grid(. ~ nof) +
theme_bw(base_size=15) + theme(legend.position = "right") + #scale_x_continuous(breaks = seq(0, tempo_final, by = 1200)) +
scale_y_continuous(breaks = seq(0,1.5, by = 0.25), limits=c(0,1.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(hjust = 0.5)) +
ylab("satisfação") + theme(legend.position = "right")
data[data$t==36000 & data$satisfaction<=0.25 & data$nof=="fd",]$id
data[data$t==36000 & data$satisfaction<=0.5 & data$nof=="fd",]$id
ggplot(data[data$t<tempo_final & data$id==11,], aes(t, fairness)) +
geom_line(aes(colour=comportamento, group=interaction(comportamento,id))) + facet_grid(. ~ nof) +
theme_bw(base_size=15) + theme(legend.position = "right") + #scale_x_continuous(breaks = seq(0, tempo_final, by = 1200)) +
scale_y_continuous(breaks = seq(-1,3.25, by = 0.25), limits=c(-1,3.25)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(hjust = 0.5)) +
ylab("justiça") + theme(legend.position = "right")
load_data <- function(path) {
files <- dir(path, pattern = '\\.csv', full.names = TRUE)
tables <- lapply(files, read.csv, stringsAsFactors=F)
do.call(rbind, tables)
}
create_columns <- function(x, controller, capacity, cycle){
if(controller==TRUE){
x["nof"] <- "fd"
} else{
x["nof"] <- "sd"
}
x["cap"] <- capacity
x["prov"] <- 0
x["cons"] <- 0
x["offered"] <- 0
x["req"] <- 0
x["fairness"] <- 0
x["satisfaction"] <- 0
x["contention"] <- 0
x["cycle"] <- cycle
x
}
library(foreach)
library(doMC)
library(dplyr)
registerDoMC(cores = 7)
compute_results <- function(df_data,tempo_final){
peers <- unique(df_data$id)
result <- foreach(i = 1:length(peers), .combine = rbind) %dopar% {
peer <- peers[i]
x <- df_data %>% filter(id == peer)
prov <- 0
cons <- 0
req <- 0
offered <- 0
finished <- FALSE
for(j in 2:nrow(x)){
if(x[j-1,]$sFed>0){
prov <- prov + (x[j-1,]$sFed * (x[j,]$t - x[j-1,]$t))
}
if(x[j-1,]$rFed>0){
cons <- cons + (x[j-1,]$rFed * (x[j,]$t - x[j-1,]$t))
}
if(x[j-1,]$dFed>0){
req <- req + (x[j-1,]$dFed * (x[j,]$t - x[j-1,]$t))
}
if(x[j-1,]$oFed>0){
offered <- offered + (x[j-1,]$oFed * (x[j,]$t - x[j-1,]$t))
}
x[j-1,]$prov <- prov
x[j-1,]$cons <- cons
x[j-1,]$req <- req
x[j-1,]$offered <- offered
if(x[j-1,]$prov==0){
x[j-1,]$fairness <- -1
} else {
x[j-1,]$fairness <- cons/prov
}
#if(x[j,]$t>=tempo_final && finished == FALSE){
#  x[j,]$t <- tempo_final
#  finished <- TRUE
#}else if(x[j,]$t>tempo_final && finished == TRUE){
#  x[j,]$t <- -1
#}
if(x[j-1,]$req==0){
x[j-1,]$satisfaction <- -1
} else{
x[j-1,]$satisfaction <- cons/req
}
}
x
}
result<-result[!(result$t==-1),]
return(result)
}
pathBase <- "/home/eduardo/git/"  #notebook
#pathBase <- "/home/eduardolfalcao/git/"  #lsd
path <- paste(pathBase,"fogbow-manager/experiments/data scripts r/done/",sep="")
path$exp <- paste(path,"40peers-20capacity/weightedNof/cycle",sep="")
adjust_data <- function(tempo_final, orderTime, experiment, cycle){
path$orderTime <- paste(paste(path$exp,cycle,sep=""),"/",sep="")
#path$sdnof <- paste(path$orderTime,"sdnof-",sep="")
#path$sdnof <- paste(path$sdnof,experiment,sep="")
#path$sdnof <- paste(path$sdnof,"-05kappa-fr/with60sBreaks/",sep="")
#data.sdnof <- load_data(path$sdnof)
#data.sdnof <- create_columns(data.sdnof, FALSE, 20, cycle)
#data.sdnof <- compute_results(data.sdnof, tempo_final)
#data.sdnof$orderTime <- orderTime
path$fdnof <- paste(path$orderTime,"fdnof-",sep="")
path$fdnof <- paste(path$fdnof,experiment,sep="")
path$fdnof <- paste(path$fdnof,"-05kappa-fr/with60sBreaks/",sep="")
print(path$fdnof)
data.fdnof <- load_data(path$fdnof)
data.fdnof <- create_columns(data.fdnof, TRUE, 20, cycle)
data.fdnof <- compute_results(data.fdnof, tempo_final)
data.fdnof$orderTime <- orderTime
#data <- rbind(data.sdnof, data.fdnof)
data.fdnof
}
movingAverage <- function(x, n=1, centered=FALSE) {
if (centered) {
before <- floor  ((n-1)/2)
after  <- ceiling((n-1)/2)
} else {
before <- n-1
after  <- 0
}
# Track the sum and count of number of non-NA items
s     <- rep(0, length(x))
count <- rep(0, length(x))
# Add the centered data
new <- x
# Add to count list wherever there isn't a
count <- count + !is.na(new)
# Now replace NA_s with 0_s and add to total
new[is.na(new)] <- 0
s <- s + new
# Add the data from before
i <- 1
while (i <= before) {
# This is the vector with offset values to add
new   <- c(rep(NA, i), x[1:(length(x)-i)])
count <- count + !is.na(new)
new[is.na(new)] <- 0
s <- s + new
i <- i+1
}
# Add the data from after
i <- 1
while (i <= after) {
# This is the vector with offset values to add
new   <- c(x[(i+1):length(x)], rep(NA, i))
count <- count + !is.na(new)
new[is.na(new)] <- 0
s <- s + new
i <- i+1
}
# return sum divided by count
s/count
}
get_contention <- function(orderTime, experiment, cycle, ma=100){
path$orderTime <- paste(paste(path$exp,cycle,sep=""),"/",sep="")
path$sdnof <- paste(path$orderTime,"sdnof-",sep="")
path$sdnof <- paste(path$sdnof,experiment,sep="")
path$sdnof <- paste(path$sdnof,"-05kappa/contention/",sep="")
print(path$sdnof)
data.sdnof <- load_data(path$sdnof)
data.sdnof$orderTime <- orderTime
data.sdnof$kappa <- movingAverage(data.sdnof$kappa,ma)
path$fdnof <- paste(path$orderTime,"fdnof-",sep="")
path$fdnof <- paste(path$fdnof,experiment,sep="")
path$fdnof <- paste(path$fdnof,"-05kappa/contention/",sep="")
print(path$fdnof)
data.fdnof <- load_data(path$fdnof)
data.fdnof$orderTime <- orderTime
data.fdnof$kappa <- movingAverage(data.fdnof$kappa,ma)
data <- rbind(data.sdnof, data.fdnof)
data
}
load_data <- function(path) {
files <- dir(path, pattern = '\\.csv', full.names = TRUE)
tables <- lapply(files, read.csv, stringsAsFactors=F)
do.call(rbind, tables)
}
create_columns <- function(x, controller, capacity, cycle){
if(controller==TRUE){
x["nof"] <- "fd"
} else{
x["nof"] <- "sd"
}
x["cap"] <- capacity
x["prov"] <- 0
x["cons"] <- 0
x["offered"] <- 0
x["req"] <- 0
x["fairness"] <- 0
x["satisfaction"] <- 0
x["contention"] <- 0
x["cycle"] <- cycle
x
}
library(foreach)
library(doMC)
library(dplyr)
registerDoMC(cores = 7)
compute_results <- function(df_data,tempo_final){
peers <- unique(df_data$id)
result <- foreach(i = 1:length(peers), .combine = rbind) %dopar% {
peer <- peers[i]
x <- df_data %>% filter(id == peer)
prov <- 0
cons <- 0
req <- 0
offered <- 0
finished <- FALSE
for(j in 2:nrow(x)){
if(x[j-1,]$sFed>0){
prov <- prov + (x[j-1,]$sFed * (x[j,]$t - x[j-1,]$t))
}
if(x[j-1,]$rFed>0){
cons <- cons + (x[j-1,]$rFed * (x[j,]$t - x[j-1,]$t))
}
if(x[j-1,]$dFed>0){
req <- req + (x[j-1,]$dFed * (x[j,]$t - x[j-1,]$t))
}
if(x[j-1,]$oFed>0){
offered <- offered + (x[j-1,]$oFed * (x[j,]$t - x[j-1,]$t))
}
x[j-1,]$prov <- prov
x[j-1,]$cons <- cons
x[j-1,]$req <- req
x[j-1,]$offered <- offered
if(x[j-1,]$prov==0){
x[j-1,]$fairness <- -1
} else {
x[j-1,]$fairness <- cons/prov
}
#if(x[j,]$t>=tempo_final && finished == FALSE){
#  x[j,]$t <- tempo_final
#  finished <- TRUE
#}else if(x[j,]$t>tempo_final && finished == TRUE){
#  x[j,]$t <- -1
#}
if(x[j-1,]$req==0){
x[j-1,]$satisfaction <- -1
} else{
x[j-1,]$satisfaction <- cons/req
}
}
x
}
result<-result[!(result$t==-1),]
return(result)
}
pathBase <- "/home/eduardo/git/"  #notebook
#pathBase <- "/home/eduardolfalcao/git/"  #lsd
path <- paste(pathBase,"fogbow-manager/experiments/data scripts r/done/",sep="")
path$exp <- paste(path,"40peers-20capacity/weightedNof/cycle",sep="")
tempo_final = 86400
cycle = 10
orderTime = 10
experiment <- paste(orderTime,"minutes",sep="")
adjust_data <- function(tempo_final, orderTime, experiment, cycle){
path$orderTime <- paste(paste(path$exp,cycle,sep=""),"/",sep="")
path$sdnof <- paste(path$orderTime,"sdnof-",sep="")
path$sdnof <- paste(path$sdnof,experiment,sep="")
path$sdnof <- paste(path$sdnof,"-1kappa/with60sBreaks/",sep="")
data.sdnof <- load_data(path$sdnof)
data.sdnof <- create_columns(data.sdnof, FALSE, 20, cycle)
data.sdnof <- compute_results(data.sdnof, tempo_final)
data.sdnof$orderTime <- orderTime
path$fdnof <- paste(path$orderTime,"fdnof-",sep="")
path$fdnof <- paste(path$fdnof,experiment,sep="")
path$fdnof <- paste(path$fdnof,"-1kappa/with60sBreaks/",sep="")
print(path$fdnof)
data.fdnof <- load_data(path$fdnof)
data.fdnof <- create_columns(data.fdnof, TRUE, 20, cycle)
data.fdnof <- compute_results(data.fdnof, tempo_final)
data.fdnof$orderTime <- orderTime
data <- rbind(data.sdnof, data.fdnof)
data
}
adjust_data <- function(tempo_final, orderTime, experiment, cycle){
path$orderTime <- paste(paste(path$exp,cycle,sep=""),"/",sep="")
path$sdnof <- paste(path$orderTime,"sdnof-",sep="")
path$sdnof <- paste(path$sdnof,experiment,sep="")
path$sdnof <- paste(path$sdnof,"-1kappa/with60sBreaks/",sep="")
print(path$sdnof)
data.sdnof <- load_data(path$sdnof)
data.sdnof <- create_columns(data.sdnof, FALSE, 20, cycle)
data.sdnof <- compute_results(data.sdnof, tempo_final)
data.sdnof$orderTime <- orderTime
path$fdnof <- paste(path$orderTime,"fdnof-",sep="")
path$fdnof <- paste(path$fdnof,experiment,sep="")
path$fdnof <- paste(path$fdnof,"-1kappa/with60sBreaks/",sep="")
print(path$fdnof)
data.fdnof <- load_data(path$fdnof)
data.fdnof <- create_columns(data.fdnof, TRUE, 20, cycle)
data.fdnof <- compute_results(data.fdnof, tempo_final)
data.fdnof$orderTime <- orderTime
data <- rbind(data.sdnof, data.fdnof)
data
}
data.orderTime10.1kappa = adjust_data(tempo_final, orderTime, experiment, cycle)
adjust_data <- function(tempo_final, orderTime, experiment, cycle){
path$orderTime <- paste(paste(path$exp,cycle,sep=""),"/",sep="")
path$sdnof <- paste(path$orderTime,"sdnof-",sep="")
path$sdnof <- paste(path$sdnof,experiment,sep="")
path$sdnof <- paste(path$sdnof,"-05kappa/with60sBreaks/",sep="")
data.sdnof <- load_data(path$sdnof)
data.sdnof <- create_columns(data.sdnof, FALSE, 20, cycle)
data.sdnof <- compute_results(data.sdnof, tempo_final)
data.sdnof$orderTime <- orderTime
path$fdnof <- paste(path$orderTime,"fdnof-",sep="")
path$fdnof <- paste(path$fdnof,experiment,sep="")
path$fdnof <- paste(path$fdnof,"-05kappa/with60sBreaks/",sep="")
print(path$fdnof)
data.fdnof <- load_data(path$fdnof)
data.fdnof <- create_columns(data.fdnof, TRUE, 20, cycle)
data.fdnof <- compute_results(data.fdnof, tempo_final)
data.fdnof$orderTime <- orderTime
data <- rbind(data.sdnof, data.fdnof)
data
}
data.orderTime10.05kappa = adjust_data(tempo_final, orderTime, experiment, cycle)
head(data.orderTime10.05kappa)
data.orderTime10.05kappa$contenção = 0.5
head(data.orderTime10.05kappa)
data.orderTime10.1kappa$contenção=1
data = rbind(data.orderTime10.05kappa,data.orderTime10.1kappa)
library(plyr)
library(reshape2)
dataQuartiles.sat.sd.05 <- ddply(data[data$t%%60==0 & data$nof=="sd" & data$contenção==0.5,], "t", summarise, máximo=max(satisfaction), percentil_80=quantile(satisfaction, probs=.80),
média=mean(satisfaction), mediana=median(satisfaction), percentil_20=quantile(satisfaction, probs=.20), mínimo = min(satisfaction))
dataQuartiles.sat.melt.sd.05 <- melt(dataQuartiles.sat.sd.05, id.vars = "t")
dataQuartiles.sat.melt.sd.05$nof <- "sd"
dataQuartiles.sat.melt.sd.05$contenção <- 0.5
dataQuartiles.sat.fd.05 <- ddply(data[data$t%%60==0 & data$nof=="fd" & data$contenção==0.5,], "t", summarise, máximo=max(satisfaction), percentil_80=quantile(satisfaction, probs=.80),
média=mean(satisfaction), mediana=median(satisfaction), percentil_20=quantile(satisfaction, probs=.20), mínimo = min(satisfaction))
dataQuartiles.sat.melt.fd.05 <- melt(dataQuartiles.sat.fd.05, id.vars = "t")
dataQuartiles.sat.melt.fd.05$nof <- "fd"
dataQuartiles.sat.sd.1 <- ddply(data[data$t%%60==0 & data$nof=="sd" & data$contenção==1,], "t", summarise, máximo=max(satisfaction), percentil_80=quantile(satisfaction, probs=.80),
média=mean(satisfaction), mediana=median(satisfaction), percentil_20=quantile(satisfaction, probs=.20), mínimo = min(satisfaction))
dataQuartiles.sat.melt.sd.1 <- melt(dataQuartiles.sat.sd.1, id.vars = "t")
dataQuartiles.sat.melt.sd.1$nof <- "sd"
dataQuartiles.sat.sd.05 <- ddply(data[data$t%%60==0 & data$nof=="sd" & data$contenção==0.5,], "t", summarise, máximo=max(satisfaction), percentil_80=quantile(satisfaction, probs=.80),
média=mean(satisfaction), mediana=median(satisfaction), percentil_20=quantile(satisfaction, probs=.20), mínimo = min(satisfaction))
dataQuartiles.sat.melt.sd.05 <- melt(dataQuartiles.sat.sd.05, id.vars = "t")
dataQuartiles.sat.melt.sd.05$nof <- "sd"
dataQuartiles.sat.melt.sd.05$contenção <- 0.5
dataQuartiles.sat.fd.05 <- ddply(data[data$t%%60==0 & data$nof=="fd" & data$contenção==0.5,], "t", summarise, máximo=max(satisfaction), percentil_80=quantile(satisfaction, probs=.80),
média=mean(satisfaction), mediana=median(satisfaction), percentil_20=quantile(satisfaction, probs=.20), mínimo = min(satisfaction))
dataQuartiles.sat.melt.fd.05 <- melt(dataQuartiles.sat.fd.05, id.vars = "t")
dataQuartiles.sat.melt.fd.05$nof <- "fd"
dataQuartiles.sat.melt.fd.05$contenção <- 0.5
dataQuartiles.sat.sd.1 <- ddply(data[data$t%%60==0 & data$nof=="sd" & data$contenção==1,], "t", summarise, máximo=max(satisfaction), percentil_80=quantile(satisfaction, probs=.80),
média=mean(satisfaction), mediana=median(satisfaction), percentil_20=quantile(satisfaction, probs=.20), mínimo = min(satisfaction))
dataQuartiles.sat.melt.sd.1 <- melt(dataQuartiles.sat.sd.1, id.vars = "t")
dataQuartiles.sat.melt.sd.1$nof <- "sd"
dataQuartiles.sat.melt.sd.1$contenção <- 1
dataQuartiles.sat.fd.1 <- ddply(data[data$t%%60==0 & data$nof=="fd" & data$contenção==1,], "t", summarise, máximo=max(satisfaction), percentil_80=quantile(satisfaction, probs=.80),
média=mean(satisfaction), mediana=median(satisfaction), percentil_20=quantile(satisfaction, probs=.20), mínimo = min(satisfaction))
dataQuartiles.sat.melt.fd.1 <- melt(dataQuartiles.sat.fd.1, id.vars = "t")
dataQuartiles.sat.melt.fd.1$nof <- "fd"
dataQuartiles.sat.melt.fd.1$contenção <- 1
dataQuartiles.sat.melt = rbind(dataQuartiles.sat.melt.sd.05,dataQuartiles.sat.melt.fd.05,dataQuartiles.sat.melt.sd.1,dataQuartiles.sat.melt.fd.1)
dataQuartiles.sat.melt$nof = factor(dataQuartiles.sat.melt$nof, levels=c('sd','fd'))
ggplot(dataQuartiles.sat.melt, aes(x = t, y = value, color = variable)) +
theme_bw(base_size=15) + #scale_x_continuous(breaks = seq(0, tempo_final, by = 600)) +
scale_y_continuous(breaks = seq(0,1.5, by = 0.25), limits = c(0,1.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(nof ~ contenção) + ylab("satisfação") + theme(legend.title=element_blank()) +
geom_line()
library(ggplot2)
ggplot(dataQuartiles.sat.melt, aes(x = t, y = value, color = variable)) +
theme_bw(base_size=15) + #scale_x_continuous(breaks = seq(0, tempo_final, by = 600)) +
scale_y_continuous(breaks = seq(0,1.5, by = 0.25), limits = c(0,1.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(nof ~ contenção) + ylab("satisfação") + theme(legend.title=element_blank()) +
geom_line()
ggplot(dataQuartiles.sat.melt, aes(x = t, y = value, color = variable)) +
theme_bw(base_size=15) + #scale_x_continuous(breaks = seq(0, tempo_final, by = 600)) +
scale_y_continuous(breaks = seq(0,1.5, by = 0.25), limits = c(0,1.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(nof ~ contenção, labeller = label_both) + ylab("satisfação") + theme(legend.title=element_blank()) +
geom_line()
ggplot(dataQuartiles.sat.melt, aes(x = t, y = value, color = variable)) +
theme_bw(base_size=15) + #scale_x_continuous(breaks = seq(0, tempo_final, by = 600)) +
scale_y_continuous(breaks = seq(0,1.5, by = 0.25), limits = c(0,1.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(contenção ~ nof, labeller = label_both) + ylab("satisfação") + theme(legend.title=element_blank()) +
geom_line()
dataQuartiles.sat.sd.05 <- ddply(data[data$t%%60==0 & data$nof=="sd" & data$contenção==0.5,], "t", summarise, máximo=max(satisfaction), terceiro_quartil=quantile(satisfaction, probs=.75),
média=mean(satisfaction), mediana=median(satisfaction), primeiro_quartil=quantile(satisfaction, probs=.25), mínimo = min(satisfaction))
dataQuartiles.sat.melt.sd.05 <- melt(dataQuartiles.sat.sd.05, id.vars = "t")
dataQuartiles.sat.melt.sd.05$nof <- "sd"
dataQuartiles.sat.melt.sd.05$contenção <- 0.5
dataQuartiles.sat.fd.05 <- ddply(data[data$t%%60==0 & data$nof=="fd" & data$contenção==0.5,], "t", summarise, máximo=max(satisfaction), terceiro_quartil=quantile(satisfaction, probs=.75),
média=mean(satisfaction), mediana=median(satisfaction), primeiro_quartil=quantile(satisfaction, probs=.25), mínimo = min(satisfaction))
dataQuartiles.sat.melt.fd.05 <- melt(dataQuartiles.sat.fd.05, id.vars = "t")
dataQuartiles.sat.melt.fd.05$nof <- "fd"
dataQuartiles.sat.melt.fd.05$contenção <- 0.5
dataQuartiles.sat.sd.1 <- ddply(data[data$t%%60==0 & data$nof=="sd" & data$contenção==1,], "t", summarise, máximo=max(satisfaction), terceiro_quartil=quantile(satisfaction, probs=.75),
média=mean(satisfaction), mediana=median(satisfaction), primeiro_quartil=quantile(satisfaction, probs=.25), mínimo = min(satisfaction))
dataQuartiles.sat.melt.sd.1 <- melt(dataQuartiles.sat.sd.1, id.vars = "t")
dataQuartiles.sat.melt.sd.1$nof <- "sd"
dataQuartiles.sat.melt.sd.1$contenção <- 1
dataQuartiles.sat.fd.1 <- ddply(data[data$t%%60==0 & data$nof=="fd" & data$contenção==1,], "t", summarise, máximo=max(satisfaction), terceiro_quartil=quantile(satisfaction, probs=.75),
média=mean(satisfaction), mediana=median(satisfaction), primeiro_quartil=quantile(satisfaction, probs=.25), mínimo = min(satisfaction))
dataQuartiles.sat.melt.fd.1 <- melt(dataQuartiles.sat.fd.1, id.vars = "t")
dataQuartiles.sat.melt.fd.1$nof <- "fd"
dataQuartiles.sat.melt.fd.1$contenção <- 1
dataQuartiles.sat.melt = rbind(dataQuartiles.sat.melt.sd.05,dataQuartiles.sat.melt.fd.05,dataQuartiles.sat.melt.sd.1,dataQuartiles.sat.melt.fd.1)
dataQuartiles.sat.melt$nof = factor(dataQuartiles.sat.melt$nof, levels=c('sd','fd'))
ggplot(dataQuartiles.sat.melt, aes(x = t, y = value, color = variable)) +
theme_bw(base_size=15) + #scale_x_continuous(breaks = seq(0, tempo_final, by = 600)) +
scale_y_continuous(breaks = seq(0,1.5, by = 0.25), limits = c(0,1.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(contenção ~ nof, labeller = label_both) + ylab("satisfação") + theme(legend.title=element_blank()) +
geom_line()
path$cycle <- paste(paste(path$exp,cycle,sep=""),"/",sep="")
png(paste(path$cycle,"satisfacao-lambda10-ciclo10-demand30-semcarona-kappa05e1.png",sep=""), width=800, height=600)
ggplot(dataQuartiles.sat.melt, aes(x = t, y = value, color = variable)) +
theme_bw(base_size=15) + #scale_x_continuous(breaks = seq(0, tempo_final, by = 600)) +
scale_y_continuous(breaks = seq(0,1.5, by = 0.25), limits = c(0,1.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(contenção ~ nof, labeller = label_both) + ylab("satisfação") + theme(legend.title=element_blank()) +
geom_line()
dev.off()
png(paste(path$cycle,"satisfacao-lambda10-ciclo10-demand30-semcarona-kappa05e1.png",sep=""), width=800, height=600)
ggplot(dataQuartiles.sat.melt, aes(x = t, y = value, color = variable)) +
theme_bw(base_size=15) + #scale_x_continuous(breaks = seq(0, tempo_final, by = 600)) +
scale_y_continuous(breaks = seq(0,1.25, by = 0.25), limits = c(0,1.25)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(contenção ~ nof, labeller = label_both) + ylab("satisfação") + theme(legend.title=element_blank()) +
geom_line()
dev.off()
ggplot(dataQuartiles.sat.melt, aes(x = t, y = value, color = variable)) +
theme_bw(base_size=15) + #scale_x_continuous(breaks = seq(0, tempo_final, by = 600)) +
scale_y_continuous(breaks = seq(0,1.125, by = 0.25), limits = c(0,1.125)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(contenção ~ nof, labeller = label_both) + ylab("satisfação") + theme(legend.title=element_blank()) +
geom_line()
png(paste(path$cycle,"satisfacao-lambda10-ciclo10-demand30-semcarona-kappa05e1.png",sep=""), width=800, height=600)
ggplot(dataQuartiles.sat.melt, aes(x = t, y = value, color = variable)) +
theme_bw(base_size=15) + #scale_x_continuous(breaks = seq(0, tempo_final, by = 600)) +
scale_y_continuous(breaks = seq(0,1.125, by = 0.25), limits = c(0,1.125)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(contenção ~ nof, labeller = label_both) + ylab("satisfação") + theme(legend.title=element_blank()) +
geom_line()
dev.off()
datalambdaQuartiles.fair.sd.05 <- ddply(datalambda[data$t%%60==0 & data$nof=="sd" & data$contenção==0.5,], "t", summarise, máximo=max(fairness), terceiro_quartil=quantile(fairness, probs=.75),
média=mean(fairness), mediana=median(fairness), primeiro_quartil=quantile(fairness, probs=.25), mínimo = min(fairness))
datalambdaQuartiles.fair.sd.05 <- ddply(data[data$t%%60==0 & data$nof=="sd" & data$contenção==0.5,], "t", summarise, máximo=max(fairness), terceiro_quartil=quantile(fairness, probs=.75),
média=mean(fairness), mediana=median(fairness), primeiro_quartil=quantile(fairness, probs=.25), mínimo = min(fairness))
datalambdaQuartiles.fair.melt.sd.05 <- melt(datalambdaQuartiles.fair.sd.05, id.vars = "t")
datalambdaQuartiles.fair.melt.sd.05$nof <- "sd"
datalambdaQuartiles.fair.melt.sd.05$cycle <- 10
datalambdaQuartiles.fair.melt.sd.05$contenção <- 0.5
datalambdaQuartiles.fair.fd.05 <- ddply(data[data$t%%60==0 & data$nof=="fd" & data$contenção==0.5,], "t", summarise, máximo=max(fairness), terceiro_quartil=quantile(fairness, probs=.75),
média=mean(fairness), mediana=median(fairness), primeiro_quartil=quantile(fairness, probs=.25), mínimo = min(fairness))
datalambdaQuartiles.fair.melt.fd.05 <- melt(datalambdaQuartiles.fair.fd.05, id.vars = "t")
datalambdaQuartiles.fair.melt.fd.05$nof <- "fd"
datalambdaQuartiles.fair.melt.fd.05$cycle <- 10
datalambdaQuartiles.fair.melt.fd.05$contenção <- 0.5
datalambdaQuartiles.fair.sd.1 <- ddply(data[data$t%%60==0 & data$nof=="sd" & data$contenção==1,], "t", summarise, máximo=max(fairness), terceiro_quartil=quantile(fairness, probs=.75),
média=mean(fairness), mediana=median(fairness), primeiro_quartil=quantile(fairness, probs=.25), mínimo = min(fairness))
datalambdaQuartiles.fair.melt.sd.1 <- melt(datalambdaQuartiles.fair.sd.05, id.vars = "t")
datalambdaQuartiles.fair.melt.sd.1$nof <- "sd"
datalambdaQuartiles.fair.melt.sd.1$cycle <- 10
datalambdaQuartiles.fair.melt.sd.1$contenção <- 1
datalambdaQuartiles.fair.fd.1 <- ddply(data[data$t%%60==0 & data$nof=="fd" & data$contenção==1,], "t", summarise, máximo=max(fairness), terceiro_quartil=quantile(fairness, probs=.75),
média=mean(fairness), mediana=median(fairness), primeiro_quartil=quantile(fairness, probs=.25), mínimo = min(fairness))
datalambdaQuartiles.fair.melt.fd.1 <- melt(datalambdaQuartiles.fair.fd.1, id.vars = "t")
datalambdaQuartiles.fair.melt.fd.1$nof <- "fd"
datalambdaQuartiles.fair.melt.fd.1$cycle <- 10
datalambdaQuartiles.fair.melt.fd.1$contenção <- 1
datalambdaQuartiles.fair.melt = rbind(datalambdaQuartiles.fair.melt.sd.05,datalambdaQuartiles.fair.melt.fd.05,datalambdaQuartiles.fair.melt.sd.1,datalambdaQuartiles.fair.melt.fd.1)
datalambdaQuartiles.fair.melt$nof = factor(datalambdaQuartiles.fair.melt$nof, levels=c('sd','fd'))
ggplot(datalambdaQuartiles.fair.melt, aes(x = t, y = value, color = variable)) +
theme_bw(base_size=15) + #scale_x_continuous(breaks = seq(0, tempo_final, by = 600)) +
scale_y_continuous(breaks = seq(0,7.5, by = 0.5), limits = c(0,7.5)) +
xlim(0,86399) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.position = "top") +
facet_grid(contenção ~ nof, labeller = label_both) + ylab("justiça") + theme(legend.title=element_blank()) +
geom_line()
png(paste(path$cycle,"fairness-lambda10-ciclo10-kappa05e1-semcarona.png",sep=""), width=800, height=600)
ggplot(datalambdaQuartiles.fair.melt, aes(x = t, y = value, color = variable)) +
theme_bw(base_size=15) + #scale_x_continuous(breaks = seq(0, tempo_final, by = 600)) +
scale_y_continuous(breaks = seq(0,7.5, by = 0.5), limits = c(0,7.5)) +
xlim(0,86399) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.position = "top") +
facet_grid(contenção ~ nof, labeller = label_both) + ylab("justiça") + theme(legend.title=element_blank()) +
geom_line()
dev.off()
png(paste(path$cycle,"fairness-lambda10-ciclo10-kappa05e1-semcarona.png",sep=""), width=800, height=600)
ggplot(datalambdaQuartiles.fair.melt, aes(x = t, y = value, color = variable)) +
theme_bw(base_size=15) + #scale_x_continuous(breaks = seq(0, tempo_final, by = 600)) +
scale_y_continuous(breaks = seq(0,7.5, by = 0.5), limits = c(0,7.5)) +
xlim(0,86399) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.position = "right") +
facet_grid(contenção ~ nof, labeller = label_both) + ylab("justiça") + theme(legend.title=element_blank()) +
geom_line()
dev.off()
